
/**
* FileSharePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from FileShare.idl
* Wednesday, July 2, 2025 2:08:06 AM EDT
*/


/**
 * FileShare interface defines the contract for the central registry server
 * in the P2P file sharing system. This interface allows clients to:
 * - Register files for sharing with other peers
 * - Unregister files when they're no longer available
 * - Search for files by name patterns
 * - Discover which peer owns a specific file for direct connection
 */
public abstract class FileSharePOA extends org.omg.PortableServer.Servant
 implements FileShareOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("registerFile", new java.lang.Integer (0));
    _methods.put ("unregisterFile", new java.lang.Integer (1));
    _methods.put ("searchFiles", new java.lang.Integer (2));
    _methods.put ("getFileOwner", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
       * Registers a file as available for sharing in the P2P network.
       * The server stores the file name along with the client's network location
       * so other clients can discover and download the file.
       * 
       * @param file_name The name of the file being registered for sharing
       * @param client_address The IP address where the file owner can be reached
       * @param client_port The port number where the file owner's server is listening
       */
       case 0:  // FileShare/registerFile
       {
         String file_name = in.read_string ();
         String client_address = in.read_string ();
         int client_port = in.read_long ();
         this.registerFile (file_name, client_address, client_port);
         out = $rh.createReply();
         break;
       }


  /**
       * Removes a file from the sharing registry.
       * After unregistration, the file will no longer appear in search results
       * and cannot be downloaded by other clients.
       * 
       * @param file_name The name of the file to stop sharing
       * @param client_address The IP address of the client that owns the file
       * @param client_port The port number of the client's file server
       */
       case 1:  // FileShare/unregisterFile
       {
         String file_name = in.read_string ();
         String client_address = in.read_string ();
         int client_port = in.read_long ();
         this.unregisterFile (file_name, client_address, client_port);
         out = $rh.createReply();
         break;
       }


  /**
       * Searches for files matching a given query string.
       * Performs a pattern match against registered file names and returns
       * a list of matching files available for download.
       * 
       * @param searchQuery The search term to match against file names
       * @return A newline-separated string of matching file names, empty if none found
       */
       case 2:  // FileShare/searchFiles
       {
         String searchQuery = in.read_string ();
         String $result = null;
         $result = this.searchFiles (searchQuery);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  /**
       * Retrieves the network location of a file's owner.
       * Used by clients to establish direct peer-to-peer connections for file downloads.
       * This enables the decentralized transfer aspect of the P2P system.
       * 
       * @param file_name The name of the file to locate
       * @return A string in format "ip:port" identifying the file owner, empty if not found
       */
       case 3:  // FileShare/getFileOwner
       {
         String file_name = in.read_string ();
         String $result = null;
         $result = this.getFileOwner (file_name);
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FileShare:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public FileShare _this() 
  {
    return FileShareHelper.narrow(
    super._this_object());
  }

  public FileShare _this(org.omg.CORBA.ORB orb) 
  {
    return FileShareHelper.narrow(
    super._this_object(orb));
  }


} // class FileSharePOA
