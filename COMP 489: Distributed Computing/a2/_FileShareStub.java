
/**
* _FileShareStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from FileShare.idl
* Wednesday, July 2, 2025 2:08:06 AM EDT
*/


/**
 * FileShare interface defines the contract for the central registry server
 * in the P2P file sharing system. This interface allows clients to:
 * - Register files for sharing with other peers
 * - Unregister files when they're no longer available
 * - Search for files by name patterns
 * - Discover which peer owns a specific file for direct connection
 */
public class _FileShareStub extends org.omg.CORBA.portable.ObjectImpl implements FileShare
{


  /**
       * Registers a file as available for sharing in the P2P network.
       * The server stores the file name along with the client's network location
       * so other clients can discover and download the file.
       * 
       * @param file_name The name of the file being registered for sharing
       * @param client_address The IP address where the file owner can be reached
       * @param client_port The port number where the file owner's server is listening
       */
  public void registerFile (String file_name, String client_address, int client_port)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("registerFile", true);
                $out.write_string (file_name);
                $out.write_string (client_address);
                $out.write_long (client_port);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                registerFile (file_name, client_address, client_port        );
            } finally {
                _releaseReply ($in);
            }
  } // registerFile


  /**
       * Removes a file from the sharing registry.
       * After unregistration, the file will no longer appear in search results
       * and cannot be downloaded by other clients.
       * 
       * @param file_name The name of the file to stop sharing
       * @param client_address The IP address of the client that owns the file
       * @param client_port The port number of the client's file server
       */
  public void unregisterFile (String file_name, String client_address, int client_port)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("unregisterFile", true);
                $out.write_string (file_name);
                $out.write_string (client_address);
                $out.write_long (client_port);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                unregisterFile (file_name, client_address, client_port        );
            } finally {
                _releaseReply ($in);
            }
  } // unregisterFile


  /**
       * Searches for files matching a given query string.
       * Performs a pattern match against registered file names and returns
       * a list of matching files available for download.
       * 
       * @param searchQuery The search term to match against file names
       * @return A newline-separated string of matching file names, empty if none found
       */
  public String searchFiles (String searchQuery)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("searchFiles", true);
                $out.write_string (searchQuery);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return searchFiles (searchQuery        );
            } finally {
                _releaseReply ($in);
            }
  } // searchFiles


  /**
       * Retrieves the network location of a file's owner.
       * Used by clients to establish direct peer-to-peer connections for file downloads.
       * This enables the decentralized transfer aspect of the P2P system.
       * 
       * @param file_name The name of the file to locate
       * @return A string in format "ip:port" identifying the file owner, empty if not found
       */
  public String getFileOwner (String file_name)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getFileOwner", true);
                $out.write_string (file_name);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getFileOwner (file_name        );
            } finally {
                _releaseReply ($in);
            }
  } // getFileOwner

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FileShare:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "_FileShareStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _FileShareStub
